* finish slog
** add hc_slog_context_do()
** add BOOL field type
** fix timestamp print
*** libcbs

struct hc_slog *_hc_slog_init(struct hc_slog *s,
			      struct hc_stream *out,
			      const bool close_out) {
  s->write = __hc_slog_write;
  s->out = out;
  s->close_out = close_out;
  return s;
}


* add vm
** stack based fix calculator
** variables
** bytecode
*** store ops as uint8_t[]

* add ref
** struct hc_ref
** hc_ref() hc/deref()
** stream/slog

* add hc_string
** add hc_string_dup() constructor
** record malloc on construction
** u8

https://github.com/jpakkane/pystd/blob/master/pystd2025.hpp

struct hc_string {
  uint16_t length;
  struct hc_malloc *malloc;
  uint8_t data[];
}

* rename stream to stream1
** cp to stream2

* add slab allocator to malloc2

* network stream
** rename stream to stream1
** add stream2

* add term
** ansi
** sharpl

* ecs using vectors

* channels using fd pairs
** files/sockets/pipes
** uring

https://unix.stackexchange.com/questions/11946/how-big-is-the-pipe-buffer
https://sumofbytes.com/blog/understanding-asynchronous-in-linux-io-uring

* mud reload
** links

https://github.com/fungos/cr

DR.H10
